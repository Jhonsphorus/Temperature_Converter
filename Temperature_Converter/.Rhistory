#model <- train(diagnosis~., data=train_set)
importance <- varImp(model, scale = FALSE)
plot(importance)
install.packages("randomForest")
library(randomForest)
library(randomForest)
model <- train(diagnosis~., data=train_set, method="randomForest")
model <- train(diagnosis~., data=train_set, method="randomForest")
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(diagnosis~., data=train_set, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale = FALSE)
plot(importance)
logis<- train(form=diagnosis~., data=train_new,method="glm", family="binomial", preProcess = c("center", "scale"), trControl=control,tuneLength = 5)
svm<- train(form=diagnosis~., data=train_new, method="svmLinear", preProcess = c("center", "scale"), trControl=control, tuneLength =5)
dct<- train(form=diagnosis~., data=train_new,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 5)
summary(logis)
summary(logis)$coef
summary(svm)$coef
svm<- train(form=diagnosis~., data=train_new, method="svmLinear", preProcess = c("center", "scale"), trControl=control, tuneLength =5)
summary(svm)$coef
svm<- train(form=diagnosis~., data=train_new, method="svmLinear", preProcess = c("center", "scale"), trControl=control, tuneLength =5)
summary(svm)
?train
?train
?train
predict()
?predict()
?predict()
summary(logis)$coef
svm<- train(form=diagnosis~., data=train_new, method="svmLinear", preProcess = c("center", "scale"), trControl=control, tuneLength =5)
dct<- train(form=diagnosis~., data=train_new,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 5)
predsvm<-predict(svm,test_new,type="raw")
# Producing the confusion table
table(predsvm, test_new$diagnosis)
# In the confusion table below the actual is on the horizontal while the predicted is on the vertical
predlog<-predict(logis,test_new,type="raw")
table(predlog, test_new$diagnosis)
preddct<-predict(dct,test_new,type="raw")
table(preddct, test_new$diagnosis)
response1 <- predictor1 <- c()
response1 <- c(response1, test_new$diagnosis)
predictor1<- c(predictor1,predsvm)
roc1 <- plot.roc(response1, predictor1,  main="ROC for SVM",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
response2 <- predictor2 <- c()
response2 <- c(response2, test_new$diagnosis)
predictor2 <- c(predictor2, preddct)
roc2 <- plot.roc(response2, predictor2,  main="ROC for DT",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="black")
response4 <- predictor4 <- c()
response4 <- c(response4, test_new$diagnosis)
predictor4 <- c(predictor4, predlog)
roc4<- plot.roc(response4, predictor4,  main="ROC for LR",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="magenta")
roc1 <- plot.roc(response1, predictor1,  main="ROC for SVM, LR and DT",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
par(new=TRUE)
roc2 <- plot.roc(response2, predictor2,  main="ROC for SVM, LR and DT",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="black")
par(new=TRUE)
roc4<- plot.roc(response4, predictor4,  main="ROC for SVM, LR and DT",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="magenta")
legend("bottomright", legend = c("SVM", "LR",'DT'), col = c("green", "black", "magenta"),lwd = 2)
response1 <- predictor1 <- c()
response1 <- c(response1, test_new$diagnosis)
predictor1<- c(predictor1,predsvm)
roc1 <- plot.roc(response1, predictor1,  main="ROC for SVM",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
#response1 <- predictor1 <- c()
response1 <- c(response1, test_new$diagnosis)
predictor1<- c(predictor1,predsvm)
roc1 <- plot.roc(response1, predictor1,  main="ROC for SVM",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
?plot.roc
?plot.roc
#response1 <- predictor1 <- c()
response1 <- c(response1, test_new$diagnosis)
predictor1<- c(predictor1,predsvm)
roc1 <- plot.roc(response1, predictor1,  main="for SVM",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
#response1 <- predictor1 <- c()
response1 <- c(response1, test_new$diagnosis)
predictor1<- c(predictor1,predsvm)
roc1 <- plot.roc(response1, predictor1,  main="ROC for SVM",
ylab="True Positive Rate",xlab="False Positive Rate", percent=TRUE, col="green")
svm<- train(form=diagnosis~., data=train_new, method="svmLinear", preProcess = c("center", "scale"), trControl=control, tuneLength =5)
dct<- train(form=diagnosis~., data=train_new,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 5)
library(caret)
library(rsample)
library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
# cnc<-read.csv(file.choose(), header=T)
cnc=read.csv("cancer.csv", header=TRUE)
View(cnc)
ggplot(cnc)+geom_point(cnc$radius_mean~cnc$texture_mean)
ggplot(cnc)+geom_point(cnc$radius_mean,cnc$texture_mean)
ggplot(cnc)+geom_point(aes(cnc$radius_mean,cnc$texture_mean))
predictive = m1$fitted.values
sepal_values = iris$Sepal.Length
result = data.frame(sepal_values,predictive)
View(result)
install.packages("tidyverse")
who_suicide2 <- read.table(file.choose(),header = TRUE,sep =",", dec = ".")
library(readxl)
library(readr)
library(DBI)
library(RMySQL)
library(haven)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
install.packages("readxl")
library(readxl)
library(tidyverse)
install.packages("readxl")
install.packages("tidyverse")
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
library(readxl)
#library(tidyverse)
library(readxl)
library(tidyverse)
install.packages("tidyverse")
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
#library(readxl)
library(tidyverse)
library(tidyverse)
#library(readxl)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(hflights)
data(hflights)
View(hflights)
library(ggplot2)
library(MASS)
library(readxl) # library for excel
library(tidyverse) # library that contain tidyr for spread, gather etc
dt = read.csv("Data/diamond.csv",header = TRUE,sep = ',',dec = '.')
dt
t.test(dt$price, mu=3000)
# t.test(dt$price, mu=3000, alternative="less") # if you use this, it means mu <3000
gender<-c("Male","Female","Male","Female","Male","Female","Male","Female","Male","Female")
table(gender)
dt = data.frame(gender,drink)
dt
library(MASS)
data("survey")
survey
library(ggplot2)
lm1 = lm(iris$Sepal.Length~iris$Petal.Length)
summary(lm1)
library(dplyr)
library(dplyr)
Age = c(30,41,42,43,31)
Weight = c(60,67,81,54,69)
dt
Age = c(30,41,42,43,31)
Weight = c(60,67,81,54,69)
dt
dt = data.frame(Age,Weight)
dt
m1 = lm(Age~Weight,dt)
summary(m1)
dnt= read.csv("sample.csv")
dnt
cor(dt)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(caret)
library(rsample)
library(tidyverse)
install.packages("tidyverse")
install.packages(c("backports", "curl", "digest", "ellipsis", "htmltools", "igraph", "knitr", "later", "listenv", "pkgconfig", "plotrix", "promises", "purrr", "R6", "Rcpp", "rlang", "rmarkdown", "scales", "selectr", "shiny"))
install.packages(c("backports", "curl", "digest", "ellipsis", "htmltools", "igraph", "knitr", "later", "listenv", "pkgconfig", "plotrix", "promises", "purrr", "R6", "Rcpp", "rlang", "rmarkdown", "scales", "selectr", "shiny"))
library(caret)
library(rsample)
library(tidyverse)
install.packages(c("listenv", "plotrix", "purrr", "Rcpp", "rlang", "rmarkdown", "scales", "selectr", "shiny", "tinytex", "xfun"))
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
install.packages(c("purrr", "Rcpp", "rlang", "scales"))
install.packages(c("purrr", "Rcpp", "rlang", "scales"))
install.packages(c("purrr", "Rcpp", "rlang", "scales"))
install.packages(c("purrr", "Rcpp", "rlang", "scales"))
install.packages(c("purrr", "Rcpp", "rlang", "scales"))
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
# cnc<-read.csv(file.choose(), header=T)
cnc=read.csv("cancer.csv", header=TRUE)
View(cnc)
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
#library(tidyverse)
library(pROC)
library(e1071)
library(ggplot2)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
library(rsample)
library(tidyverse)
install.packages("scales")
library(caret)
library(rsample)
library(tidyverse)
library(caret)
library(rsample)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("Rtools")
install.packages("rlang")
install.packages("rlang")
getwd()
shiny::runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test2')
runApp('~/RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp()
runApp()
runApp()
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
?verbatimTextOutput
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
shiny::runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test3')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test3')
?textOutput
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Clustering/clust.R')
?textOutput
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
runApp('RProject/Semicolon_Projects/Session11_Shinyapp/Test')
?fluidPage
runApp('RProject/Personal_Projects/Shinnyapp/Sample3/moviesbrowser')
runApp('RProject/Personal_Projects/Shinnyapp/Sample3/moviesbrowser')
install.packages("movies")
shiny::runApp('RProject/Personal_Projects/Shinnyapp/Sample1')
runApp('RProject/Personal_Projects/Shinnyapp/Sample2/Example2')
runApp('RProject/Personal_Projects/Shinnyapp/Sample2/Example2')
runApp('RProject/Personal_Projects/Shinnyapp/Sample1')
install.packages("rtweet")
shiny::runApp('RProject/Boxplotapp')
x<-datasets::UCBAdmissions
View(x)
datasets::
install.packages("stplanr")
?devtools
?devtools
install.packages("stplanr")
library(stplanr)
?stplanr
data("flow")
View(flow)
data("flow_dests")
View(flow_dests)
shiny::runApp('RProject/Plotbox/Plotboxapp')
https://rpubs.com/Jhonsphorus/559091
https://rpubs.com/Jhonsphorus/559091
rsconnect::setAccountInfo(name='jhonsphorus', token='612DAB51005159762881CF2CAA8BC4A4', secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
shiny::runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
shiny::runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
runApp('RProject/Plotbox/Plotboxapp')
rsconnect::deployApp('C:/Users/usewr/Documents/RProject/Plotbox/Plotboxapp')
who_suicide2 <- read.table(file.choose(),header = TRUE,sep =",", dec = ".")
who_suicide2 <- read.table(file.choose(),header = TRUE,sep =",", dec = ".")
head(who_suicide2)
tail(who_suicide2)
who_suicide2
who2 = read.table("data/who_suicide_statistics.csv",header = TRUE,sep =",", dec = ".")
View(who2)
auto = read.table("data/auto.txt",header = FALSE,sep =",", dec = ".")
View(auto)
potato = read.table("data/potatoes.txt",header = FALSE,sep ="\t", dec = ".")
View(potato)
sample1 = read.csv("data/who_suicide_statistics.csv",header = TRUE)
View(sample1)
sample2 = read.csv2("data/who_suicide_statistics_semi.csv",header = TRUE)
potato_2 = read.delim("data/potatoes.txt",sep = "\t", header=F)
View(potato_2)
auto2 = read.delim("data/auto.txt",sep = ",", header=F)
View(auto2)
library(readxl)
library(readr)
sht1 <- read_excel("data/Employees.xlsx", sheet = 1)
sht2 <- read_excel("data/Employees.xlsx", sheet = 2)
detach("package:readr", unload = TRUE)
detach("package:readxl", unload = TRUE)
#library(readxl)
#library(readr)
sht1 <- read_excel("data/Employees.xlsx", sheet = 1)
library(readxl)
#library(readr)
sht1 <- read_excel("data/Employees.xlsx", sheet = 1)
sht2 <- read_excel("data/Employees.xlsx", sheet = 2)
View(sht1)
View(sht2)
?read_excel
sht1 <- read_xlsx("data/Employees.xlsx", sheet = 1)
sht2 <- read_excel("data/Employees.xlsx", sheet = 2)
sample1 = read_csv("data/who_suicide_statistics.csv")
library(readxl)
library(readr)
sample1 = read_csv("data/who_suicide_statistics.csv")
sample1 = read_csv("data/who_suicide_statistics.csv")
View(sample1)
?`DBI-package`
table <- dbListTables(connect) # dbListTables() is used to see the list of tables
library(DBI)
library(RMySQL)
host <- "courses.csrrinzqubik.us-east-1.rds.amazonaws.com"
connect <- dbConnect(MySQL(), dbname = "tweater", host = host, port = 3306, user = "student", password = 'datacamp')
#write.table(users,file = "users2.xlsx")
write.table(users,file = "users2.txt", sep = "\t")
write.table(users,file = "users4.txt", sep = ",")
#hs = read.csv("data/who_suicide_statistics.csv",header = TRUE)
hs = read.csv("data/house.csv",header = TRUE)
plot(hs$Bathrooms, hs$Price, main = "Relationship between Price and Bathrooms", xlab = "Number of Bathrooms", ylab = "Price of the house")
plot(hs$Bathrooms, hs$Price, title ("Relationship between Price and Bathrooms"), xlab = "Number of Bathrooms", ylab = "Price of the house")
a = plot(hs$Bathrooms, hs$Price, main = "Relationship between Price and Bathrooms", xlab = "Number of Bathrooms", ylab = "Price of the house")
a
View(a)
data::flow
?dbConnect
host = "localhost"
connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd",host=host,port = 3306, user = "root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
buyer_table <- dbReadTable(connect, "buyer")
View(buyer_table)
host = "localhost"
connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd2",host=host,port = 3306, user = "root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
host = "localhost"
#connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd2",host=host,port = 3306, user = #"root", password = "ODUNlade1>")
connect = dbConnect(RMySQL::MySQL(), dbname = "menagerie",host=host,port = 3306, user = "root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
host = "localhost"
#connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd2",host=host,port = 3306, user = #"root", password = "ODUNlade1>")
connect = dbConnect(RMySQL::MySQL(), dbname = "hospital",host=host,port = 3306, user = "root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
host = "localhost"
connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd2",host=host,port = 3306, user = "root", password = "ODUNlade1>")
#connect = dbConnect(RMySQL::MySQL(), dbname = "hospital",host=host,port = 3306, user = #"root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
host = "localhost"
connect = dbConnect(RMySQL::MySQL(), dbname = "cape_codd2",host=host,port = 3306, user = "Ibukun", password = "ODUNlade1>")
#connect = dbConnect(RMySQL::MySQL(), dbname = "hospital",host=host,port = 3306, user = #"root", password = "ODUNlade1>")
table1 = dbListTables(connect)
table1
buyer_table <- dbReadTable(connect, "buyer")
View(buyer_table)
?DBI
?RSQLServer
hist(hs$Price, xlab="Price", main="Histogram of Price")
hist(log(hs$Price), xlab="Price", main="Histogram of Price")
ex<- read.csv("data/example.csv", header =TRUE)
str(ex)
levels(ex$Status)
ex$Status<-as.factor(ex$Status)
levels(ex$Status)
levels(ex$Status)<-c("Regular","Short","foreclosure")
levels(ex$Status)<-c("Regular","Short","foreclosure")
levels(ex$Status)
str(ex$Status)
diamondTb = read.table("data/diamond.csv", header = TRUE, sep = ",")
View(diamondTb)
plot(diamondTb$price,diamondTb$carat, xlab = "Price of diamond", ylab = "Carat of diamond", main = "Plot of Carats of diamond vs Price of diamond")
hist(diamondTb$price, xlab = "Price", main = "Histogram of Diamond Price")
hist(log(diamondTb$price), xlab = "Price", main = "Histogram of Diamond Price")
barplot(hs$Bedrooms, hs$Bathrooms, xlab = 'Bedrooms', ylab = 'Bathrooms', main='Plot of Bathrooms vs Bedrooms')
boxplot(hs$Price~hs$Status, main = "Boxplot of price based on Status", xlab = "Status of House", ylab = "Price of House")
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
shiny::runApp('RProject/Personal_Projects/Temp_Converter/Temperature_Converter')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
rsconnect::setAccountInfo(name='jhonsphorus',
token='612DAB51005159762881CF2CAA8BC4A4',
secret='pLGId8uzV26qQ8xeWeo4VvQLYp7dEQr3SzxI2/mI')
runApp('RProject/Personal_Projects/Temp_Converter/Temperature_Converter')
runApp('RProject/Personal_Projects/Temp_Converter/Temperature_Converter')
